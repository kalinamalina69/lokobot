import logging
import asyncio
from datetime import datetime, timedelta
from aiogram import Bot
import pytz
from dotenv import load_dotenv
import os
import random  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º random

load_dotenv()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")  # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
CHAT_ID = -1002311755846  # –ß–∏—Å–ª–æ–≤–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞/–≥—Ä—É–ø–ø—ã (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π)
print(TOKEN)  # –í—ã–≤–µ–¥–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞

# –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM —Å –≤–µ–¥—É—â–∏–º–∏ –Ω—É–ª—è–º–∏)
users = [
    {"first_name": "–ò–≤–∞–Ω", "last_name": "–ò–≤–∞–Ω–æ–≤", "birthday": "29.01"},
    {"first_name": "–ú–∞—Ä–∏—è", "last_name": "–ü–µ—Ç—Ä–æ–≤–∞", "birthday": "15.03"},
    {"first_name": "–ê–ª–µ–∫—Å–µ–π", "last_name": "–°–∏–¥–æ—Ä–æ–≤", "birthday": "20.05"},
]

# –°–ø–∏—Å–æ–∫ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π
congratulations = [
    "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è! –ü—É—Å—Ç—å –≤ –∂–∏–∑–Ω–∏ –±—É–¥–µ—Ç –º–Ω–æ–≥–æ —Ä–∞–¥–æ—Å—Ç–∏, —Å—á–∞—Å—Ç—å—è –∏ —É—Å–ø–µ—Ö–æ–≤! ü•≥üéä",
    "üéÇ –° –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è! –ñ–µ–ª–∞–µ–º –∑–¥–æ—Ä–æ–≤—å—è, –ª—é–±–≤–∏ –∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∂–µ–ª–∞–Ω–∏–π! üéâüéÅ",
    "üéä –ü—É—Å—Ç—å —ç—Ç–æ—Ç –¥–µ–Ω—å –ø—Ä–∏–Ω–µ—Å–µ—Ç –º–Ω–æ–≥–æ —É–ª—ã–±–æ–∫, –ø–æ–¥–∞—Ä–∫–æ–≤ –∏ —Ç–µ–ø–ª—ã—Ö —Å–ª–æ–≤! –° –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è! üéâüéÇ",
    "ü•≥ –ñ–µ–ª–∞–µ–º, —á—Ç–æ–±—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –±—ã–ª –Ω–∞–ø–æ–ª–Ω–µ–Ω —Ä–∞–¥–æ—Å—Ç—å—é –∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ–º! –° –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è! üéâüéä",
    "üéâ –ü—É—Å—Ç—å —Å–±—É–¥—É—Ç—Å—è –≤—Å–µ –º–µ—á—Ç—ã –∏ –∂–µ–ª–∞–Ω–∏—è! –° –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è! üéÇüéÅ",
]

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
bot = Bot(token=TOKEN)

# –ú–æ—Å–∫–æ–≤—Å–∫–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
MOSCOW_TZ = pytz.timezone("Europe/Moscow")

async def check_birthdays():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è —á–µ–π-—Ç–æ –ø—Ä–∞–∑–¥–Ω–∏–∫."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É —Å —É—á–µ—Ç–æ–º –≤–µ–¥—É—â–∏—Ö –Ω—É–ª–µ–π (–ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏)
        today = datetime.now(MOSCOW_TZ).strftime("%d.%m")
        celebrants = [
            f"üéÇ {user['first_name']} {user['last_name']}"
            for user in users if user["birthday"] == today
        ]

        if celebrants:
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ
            congratulation_message = random.choice(congratulations)

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–æ–≤
            if len(celebrants) == 1:
                message = f"üéâ –°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –ø—Ä–∞–∑–¥–Ω—É–µ—Ç {celebrants[0]}! {congratulation_message}"
            else:
                message = "üéâ –°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –ø—Ä–∞–∑–¥–Ω—É—é—Ç:\n" + "\n".join(celebrants) + f"\n{congratulation_message}"

            await bot.send_message(chat_id=CHAT_ID, text=message)
            logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {len(celebrants)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        else:
            logging.info("–°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–æ–≤.")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è: {e}", exc_info=True)


async def scheduler():
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00 —É—Ç—Ä–∞ –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏."""
    while True:
        try:
            now = datetime.now(MOSCOW_TZ)
            target_time = now.replace(hour=9, minute=0, second=0, microsecond=0)

            # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —É–∂–µ –ø–æ—Å–ª–µ 9:00, –ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
            if now >= target_time:
                target_time += timedelta(days=1)

            # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ 9:00 —É—Ç—Ä–∞
            seconds_until_target = (target_time - now).total_seconds()
            logging.info(f"–û–∂–∏–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ –≤ 9:00 —É—Ç—Ä–∞ –ø–æ –ú–æ—Å–∫–≤–µ (—á–µ—Ä–µ–∑ {seconds_until_target // 3600:.0f} —á. {(seconds_until_target % 3600) // 60:.0f} –º–∏–Ω.).")
            await asyncio.sleep(seconds_until_target)

            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
            await check_birthdays()

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}", exc_info=True)
            await asyncio.sleep(60)  # –ü–æ–¥–æ–∂–¥–∞—Ç—å –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π


async def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫."""
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –û–∂–∏–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ 9:00 —É—Ç—Ä–∞ –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏...")
    await scheduler()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}", exc_info=True)
